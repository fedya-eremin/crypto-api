// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"fmt"

	"github.com/gofiber/fiber/v2"
)

// AddCurrencyRequest defines model for AddCurrencyRequest.
type AddCurrencyRequest struct {
	// Coin Cryptocurrency symbol (e.g., BTC, ETH)
	Coin string `json:"coin"`

	// Interval Collection interval in seconds
	Interval int `json:"interval"`
}

// PriceRequest defines model for PriceRequest.
type PriceRequest struct {
	// Coin Cryptocurrency symbol
	Coin string `json:"coin"`

	// Timestamp UNIX timestamp for the requested price
	Timestamp int `json:"timestamp"`
}

// PriceResponse defines model for PriceResponse.
type PriceResponse struct {
	// Coin Cryptocurrency symbol
	Coin string `json:"coin"`

	// Price Price at the returned timestamp
	Price string `json:"price"`

	// Timestamp UNIX timestamp of the returned price
	Timestamp int `json:"timestamp"`
}

// RemoveCurrencyRequest defines model for RemoveCurrencyRequest.
type RemoveCurrencyRequest struct {
	// Coin Cryptocurrency symbol to remove
	Coin string `json:"coin"`
}

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	Message string `json:"message"`
	Success bool   `json:"success"`
}

// PostCurrencyAddJSONRequestBody defines body for PostCurrencyAdd for application/json ContentType.
type PostCurrencyAddJSONRequestBody = AddCurrencyRequest

// PostCurrencyPriceJSONRequestBody defines body for PostCurrencyPrice for application/json ContentType.
type PostCurrencyPriceJSONRequestBody = PriceRequest

// PostCurrencyRemoveJSONRequestBody defines body for PostCurrencyRemove for application/json ContentType.
type PostCurrencyRemoveJSONRequestBody = RemoveCurrencyRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add cryptocurrency to watchlist
	// (POST /currency/add)
	PostCurrencyAdd(c *fiber.Ctx) error
	// Get cryptocurrency price
	// (POST /currency/price)
	PostCurrencyPrice(c *fiber.Ctx) error
	// Remove cryptocurrency from watchlist
	// (POST /currency/remove)
	PostCurrencyRemove(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// PostCurrencyAdd operation middleware
func (siw *ServerInterfaceWrapper) PostCurrencyAdd(c *fiber.Ctx) error {

	return siw.Handler.PostCurrencyAdd(c)
}

// PostCurrencyPrice operation middleware
func (siw *ServerInterfaceWrapper) PostCurrencyPrice(c *fiber.Ctx) error {

	return siw.Handler.PostCurrencyPrice(c)
}

// PostCurrencyRemove operation middleware
func (siw *ServerInterfaceWrapper) PostCurrencyRemove(c *fiber.Ctx) error {

	return siw.Handler.PostCurrencyRemove(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/currency/add", wrapper.PostCurrencyAdd)

	router.Post(options.BaseURL+"/currency/price", wrapper.PostCurrencyPrice)

	router.Post(options.BaseURL+"/currency/remove", wrapper.PostCurrencyRemove)

}

type PostCurrencyAddRequestObject struct {
	Body *PostCurrencyAddJSONRequestBody
}

type PostCurrencyAddResponseObject interface {
	VisitPostCurrencyAddResponse(ctx *fiber.Ctx) error
}

type PostCurrencyAdd200JSONResponse SuccessResponse

func (response PostCurrencyAdd200JSONResponse) VisitPostCurrencyAddResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostCurrencyAdd400Response struct {
}

func (response PostCurrencyAdd400Response) VisitPostCurrencyAddResponse(ctx *fiber.Ctx) error {
	ctx.Status(400)
	return nil
}

type PostCurrencyAdd404Response struct {
}

func (response PostCurrencyAdd404Response) VisitPostCurrencyAddResponse(ctx *fiber.Ctx) error {
	ctx.Status(404)
	return nil
}

type PostCurrencyAdd500Response struct {
}

func (response PostCurrencyAdd500Response) VisitPostCurrencyAddResponse(ctx *fiber.Ctx) error {
	ctx.Status(500)
	return nil
}

type PostCurrencyPriceRequestObject struct {
	Body *PostCurrencyPriceJSONRequestBody
}

type PostCurrencyPriceResponseObject interface {
	VisitPostCurrencyPriceResponse(ctx *fiber.Ctx) error
}

type PostCurrencyPrice200JSONResponse PriceResponse

func (response PostCurrencyPrice200JSONResponse) VisitPostCurrencyPriceResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostCurrencyPrice400Response struct {
}

func (response PostCurrencyPrice400Response) VisitPostCurrencyPriceResponse(ctx *fiber.Ctx) error {
	ctx.Status(400)
	return nil
}

type PostCurrencyPrice404Response struct {
}

func (response PostCurrencyPrice404Response) VisitPostCurrencyPriceResponse(ctx *fiber.Ctx) error {
	ctx.Status(404)
	return nil
}

type PostCurrencyPrice500Response struct {
}

func (response PostCurrencyPrice500Response) VisitPostCurrencyPriceResponse(ctx *fiber.Ctx) error {
	ctx.Status(500)
	return nil
}

type PostCurrencyRemoveRequestObject struct {
	Body *PostCurrencyRemoveJSONRequestBody
}

type PostCurrencyRemoveResponseObject interface {
	VisitPostCurrencyRemoveResponse(ctx *fiber.Ctx) error
}

type PostCurrencyRemove200JSONResponse SuccessResponse

func (response PostCurrencyRemove200JSONResponse) VisitPostCurrencyRemoveResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostCurrencyRemove400Response struct {
}

func (response PostCurrencyRemove400Response) VisitPostCurrencyRemoveResponse(ctx *fiber.Ctx) error {
	ctx.Status(400)
	return nil
}

type PostCurrencyRemove404Response struct {
}

func (response PostCurrencyRemove404Response) VisitPostCurrencyRemoveResponse(ctx *fiber.Ctx) error {
	ctx.Status(404)
	return nil
}

type PostCurrencyRemove500Response struct {
}

func (response PostCurrencyRemove500Response) VisitPostCurrencyRemoveResponse(ctx *fiber.Ctx) error {
	ctx.Status(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Add cryptocurrency to watchlist
	// (POST /currency/add)
	PostCurrencyAdd(ctx context.Context, request PostCurrencyAddRequestObject) (PostCurrencyAddResponseObject, error)
	// Get cryptocurrency price
	// (POST /currency/price)
	PostCurrencyPrice(ctx context.Context, request PostCurrencyPriceRequestObject) (PostCurrencyPriceResponseObject, error)
	// Remove cryptocurrency from watchlist
	// (POST /currency/remove)
	PostCurrencyRemove(ctx context.Context, request PostCurrencyRemoveRequestObject) (PostCurrencyRemoveResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostCurrencyAdd operation middleware
func (sh *strictHandler) PostCurrencyAdd(ctx *fiber.Ctx) error {
	var request PostCurrencyAddRequestObject

	var body PostCurrencyAddJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostCurrencyAdd(ctx.UserContext(), request.(PostCurrencyAddRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCurrencyAdd")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostCurrencyAddResponseObject); ok {
		if err := validResponse.VisitPostCurrencyAddResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostCurrencyPrice operation middleware
func (sh *strictHandler) PostCurrencyPrice(ctx *fiber.Ctx) error {
	var request PostCurrencyPriceRequestObject

	var body PostCurrencyPriceJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostCurrencyPrice(ctx.UserContext(), request.(PostCurrencyPriceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCurrencyPrice")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostCurrencyPriceResponseObject); ok {
		if err := validResponse.VisitPostCurrencyPriceResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostCurrencyRemove operation middleware
func (sh *strictHandler) PostCurrencyRemove(ctx *fiber.Ctx) error {
	var request PostCurrencyRemoveRequestObject

	var body PostCurrencyRemoveJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostCurrencyRemove(ctx.UserContext(), request.(PostCurrencyRemoveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCurrencyRemove")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostCurrencyRemoveResponseObject); ok {
		if err := validResponse.VisitPostCurrencyRemoveResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
